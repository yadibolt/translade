<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\translade\Manager\DefaultsManager;


function translade_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $defaults_manager = new DefaultsManager();

  $weight = 0;

  $config = \Drupal::config('translade.settings');
  $config_content_types = $config->get('content_types') ?: [];
  $config_taxonomy_types = $config->get('taxonomy_types') ?: [];
  $config_ai_actions = $config->get('content_ai_actions') ?: [];
  $ai_actions = $defaults_manager->getAIActions();

  // language
  $language_id = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if (!$language_id) {
    $language_id = \Drupal::languageManager()->getDefaultLanguage()->getId();
  }

  // actions processing
  $actions = [];
  foreach ($config_ai_actions as $key => $value) {
    $actions[] = $key . ":" . t($ai_actions[$key]);
  }

  $form_shorthand_type = "node_";
  if (str_contains($form_id, 'commerce_product')) $form_shorthand_type = "commerce_product_";

  foreach ($config_content_types as $content_type) {
    if ($form_id == $form_shorthand_type . $content_type . '_edit_form') {
      $form['#attached']['library'][] = 'translade/transladejs';
      $form['#attached']['library'][] = 'translade/transladecss';

      $form_entity = $form_state->getFormObject()->getEntity();
      $definitions = $form_entity->getFieldDefinitions();

      foreach ($definitions as $key => $value) {
        $field_type = $value->getType();
        if (in_array($field_type, $defaults_manager->getSupportedFieldTypes())) {
          // change class for js rendering
          $uid = Html::getClass($key . '-' . $form_entity->id() . '-' . time());
          $form[$key]['#attributes']['class'][] = 'translade-field-' . $uid . ' translade-type-' . $field_type;
          $form[$key]['translade_shadow_root'] = [
            '#type' => 'markup',
            '#markup' => '<div id=translade-shadow-root-'.$uid.'></div>',
          ];
        }
      }

      $form['translade_shadow_root_mount'] = [
        '#type' => 'markup',
        '#markup' => '<div id="translade-mount-shadow-root"></div>',
        '#weight' => -100,
      ];

      $form['translade_shadow_root_config'] = [
        '#type' => 'textarea',
        '#attributes' => [
          'id' => ['translade-shadow-root-config'],
        ],
        '#value' => json_encode([
          'languages' => $config->get('languages') ?: [],
          'dark_theme' => $config->get('theme_dark') ?: FALSE,
          'content_language' => $language_id,
          'content_ai_actions' => $actions,
          'form_id' => $form_id,
        ]),
        '#weight' => $weight++,
      ];
    }
  }

  $form_shorthand_type = "taxonomy_term_";
  foreach ($config_taxonomy_types as $taxonomy_type) {
    if ($form_id === $form_shorthand_type . $taxonomy_type . '_form') {
      $form['#attached']['library'][] = 'translade/transladejs';
      $form['#attached']['library'][] = 'translade/transladecss';

      $form_entity = $form_state->getFormObject()->getEntity();
      $definitions = $form_entity->getFieldDefinitions();

      foreach ($definitions as $key => $value) {
        $field_type = $value->getType();
        if (in_array($field_type, $defaults_manager->getSupportedFieldTypes())) {
          // change class for js rendering
          $uid = Html::getClass($key . '-' . $form_entity->id() . '-' . time());
          $form[$key]['#attributes']['class'][] = 'translade-field-' . $uid . ' translade-type-' . $field_type;
          $form[$key]['translade_shadow_root'] = [
            '#type' => 'markup',
            '#markup' => '<div id=translade-shadow-root-'.$uid.'></div>',
          ];
        }
      }

      $form['translade_shadow_root_mount'] = [
        '#type' => 'markup',
        '#markup' => '<div id="translade-mount-shadow-root"></div>',
        '#weight' => -100,
      ];

      $form['translade_shadow_root_config'] = [
        '#type' => 'textarea',
        '#attributes' => [
          'id' => ['translade-shadow-root-config'],
        ],
        '#value' => json_encode([
          'languages' => $config->get('languages') ?: [],
          'dark_theme' => $config->get('theme_dark') ?: FALSE,
          'content_language' => $language_id,
          'content_ai_actions' => $actions,
          'form_id' => $form_id,
        ]),
        '#weight' => $weight++,
      ];
    }
  }
}
